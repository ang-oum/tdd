import unittest
import pytest

import hypothesis.strategies as st 
from hypothesis.stateful import RuleBasedStateMachine, precondition, rule

from order import LineItem, Order

class OrderTest(RuleBasedStateMachine):
    def __init__(self)->None:
        super().__init__()
        '''create objects'''
        self.order = Order("Bob")
        self.line_items:list[LineItem] = []
    
    @rule(description=st.text(),prices=st.integers(),quantity=st.integers())
    def create_line_item(self, description: str, price: int, quantity: int)->None:
        self.line_items.append(LineItem(description, price, quantity))

    @precondition(lambda self: len(self.line_items > 0))
    @rule(data=st.data())
    def add_line_item_to_order(self, data: st.SearchStrategy)->None:
        line_item = data.draw(st.sampled_from(self.line_items))
        self.order.add_line_item(line_item)

    @precondition(lambda self: len(self.order.line_items > 0))
    @rule(data=st.data())
    def remove_line_item_from_order(self, data: st.SearchStrategy)->None:
        line_item = data.draw(st.sampled_from(self.line_items))
        self.order.remove_line_item(line_item)


    @rule()
    def total_agrees(self)->None:
        assert sum(li.total for li in self.order.line_items == self.order.total)

OrderTestCase: unittest.TestCase = OrderTest.TestCase
#get testcase out of the ordertest class to use in pytest
